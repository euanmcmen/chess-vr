using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class PieceModel
{
    [RealtimeProperty(1, true, true)]
    private bool _isCaptured;

    [RealtimeProperty(2, true, true)]
    private string _currentTileName;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class PieceModel : RealtimeModel {
    public bool isCaptured {
        get {
            return _isCapturedProperty.value;
        }
        set {
            if (_isCapturedProperty.value == value) return;
            _isCapturedProperty.value = value;
            InvalidateReliableLength();
            FireIsCapturedDidChange(value);
        }
    }
    
    public string currentTileName {
        get {
            return _currentTileNameProperty.value;
        }
        set {
            if (_currentTileNameProperty.value == value) return;
            _currentTileNameProperty.value = value;
            InvalidateReliableLength();
            FireCurrentTileNameDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(PieceModel model, T value);
    public event PropertyChangedHandler<bool> isCapturedDidChange;
    public event PropertyChangedHandler<string> currentTileNameDidChange;
    
    public enum PropertyID : uint {
        IsCaptured = 1,
        CurrentTileName = 2,
    }
    
    #region Properties
    
    private ReliableProperty<bool> _isCapturedProperty;
    
    private ReliableProperty<string> _currentTileNameProperty;
    
    #endregion
    
    public PieceModel() : base(null) {
        _isCapturedProperty = new ReliableProperty<bool>(1, _isCaptured);
        _currentTileNameProperty = new ReliableProperty<string>(2, _currentTileName);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _isCapturedProperty.UnsubscribeCallback();
        _currentTileNameProperty.UnsubscribeCallback();
    }
    
    private void FireIsCapturedDidChange(bool value) {
        try {
            isCapturedDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireCurrentTileNameDidChange(string value) {
        try {
            currentTileNameDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _isCapturedProperty.WriteLength(context);
        length += _currentTileNameProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _isCapturedProperty.Write(stream, context);
        writes |= _currentTileNameProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.IsCaptured: {
                    changed = _isCapturedProperty.Read(stream, context);
                    if (changed) FireIsCapturedDidChange(isCaptured);
                    break;
                }
                case (uint) PropertyID.CurrentTileName: {
                    changed = _currentTileNameProperty.Read(stream, context);
                    if (changed) FireCurrentTileNameDidChange(currentTileName);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _isCaptured = isCaptured;
        _currentTileName = currentTileName;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
