using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class PieceTurnModel
{
    [RealtimeProperty(1, true, true)]
    private bool _shouldMoveOnThisTurn;

    [RealtimeProperty(2, true, true)]
    private int _inTurnMoveIndex;

    [RealtimeProperty(3, true, true)]
    private bool _shouldBeCapturedOnThisTurn;

    [RealtimeProperty(4, true, true)]
    private bool _movementStarted;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class PieceTurnModel : RealtimeModel {
    public bool shouldMoveOnThisTurn {
        get {
            return _shouldMoveOnThisTurnProperty.value;
        }
        set {
            if (_shouldMoveOnThisTurnProperty.value == value) return;
            _shouldMoveOnThisTurnProperty.value = value;
            InvalidateReliableLength();
            FireShouldMoveOnThisTurnDidChange(value);
        }
    }
    
    public int inTurnMoveIndex {
        get {
            return _inTurnMoveIndexProperty.value;
        }
        set {
            if (_inTurnMoveIndexProperty.value == value) return;
            _inTurnMoveIndexProperty.value = value;
            InvalidateReliableLength();
            FireInTurnMoveIndexDidChange(value);
        }
    }
    
    public bool shouldBeCapturedOnThisTurn {
        get {
            return _shouldBeCapturedOnThisTurnProperty.value;
        }
        set {
            if (_shouldBeCapturedOnThisTurnProperty.value == value) return;
            _shouldBeCapturedOnThisTurnProperty.value = value;
            InvalidateReliableLength();
            FireShouldBeCapturedOnThisTurnDidChange(value);
        }
    }
    
    public bool movementStarted {
        get {
            return _movementStartedProperty.value;
        }
        set {
            if (_movementStartedProperty.value == value) return;
            _movementStartedProperty.value = value;
            InvalidateReliableLength();
            FireMovementStartedDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(PieceTurnModel model, T value);
    public event PropertyChangedHandler<bool> shouldMoveOnThisTurnDidChange;
    public event PropertyChangedHandler<int> inTurnMoveIndexDidChange;
    public event PropertyChangedHandler<bool> shouldBeCapturedOnThisTurnDidChange;
    public event PropertyChangedHandler<bool> movementStartedDidChange;
    
    public enum PropertyID : uint {
        ShouldMoveOnThisTurn = 1,
        InTurnMoveIndex = 2,
        ShouldBeCapturedOnThisTurn = 3,
        MovementStarted = 4,
    }
    
    #region Properties
    
    private ReliableProperty<bool> _shouldMoveOnThisTurnProperty;
    
    private ReliableProperty<int> _inTurnMoveIndexProperty;
    
    private ReliableProperty<bool> _shouldBeCapturedOnThisTurnProperty;
    
    private ReliableProperty<bool> _movementStartedProperty;
    
    #endregion
    
    public PieceTurnModel() : base(null) {
        _shouldMoveOnThisTurnProperty = new ReliableProperty<bool>(1, _shouldMoveOnThisTurn);
        _inTurnMoveIndexProperty = new ReliableProperty<int>(2, _inTurnMoveIndex);
        _shouldBeCapturedOnThisTurnProperty = new ReliableProperty<bool>(3, _shouldBeCapturedOnThisTurn);
        _movementStartedProperty = new ReliableProperty<bool>(4, _movementStarted);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _shouldMoveOnThisTurnProperty.UnsubscribeCallback();
        _inTurnMoveIndexProperty.UnsubscribeCallback();
        _shouldBeCapturedOnThisTurnProperty.UnsubscribeCallback();
        _movementStartedProperty.UnsubscribeCallback();
    }
    
    private void FireShouldMoveOnThisTurnDidChange(bool value) {
        try {
            shouldMoveOnThisTurnDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireInTurnMoveIndexDidChange(int value) {
        try {
            inTurnMoveIndexDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireShouldBeCapturedOnThisTurnDidChange(bool value) {
        try {
            shouldBeCapturedOnThisTurnDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireMovementStartedDidChange(bool value) {
        try {
            movementStartedDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _shouldMoveOnThisTurnProperty.WriteLength(context);
        length += _inTurnMoveIndexProperty.WriteLength(context);
        length += _shouldBeCapturedOnThisTurnProperty.WriteLength(context);
        length += _movementStartedProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _shouldMoveOnThisTurnProperty.Write(stream, context);
        writes |= _inTurnMoveIndexProperty.Write(stream, context);
        writes |= _shouldBeCapturedOnThisTurnProperty.Write(stream, context);
        writes |= _movementStartedProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.ShouldMoveOnThisTurn: {
                    changed = _shouldMoveOnThisTurnProperty.Read(stream, context);
                    if (changed) FireShouldMoveOnThisTurnDidChange(shouldMoveOnThisTurn);
                    break;
                }
                case (uint) PropertyID.InTurnMoveIndex: {
                    changed = _inTurnMoveIndexProperty.Read(stream, context);
                    if (changed) FireInTurnMoveIndexDidChange(inTurnMoveIndex);
                    break;
                }
                case (uint) PropertyID.ShouldBeCapturedOnThisTurn: {
                    changed = _shouldBeCapturedOnThisTurnProperty.Read(stream, context);
                    if (changed) FireShouldBeCapturedOnThisTurnDidChange(shouldBeCapturedOnThisTurn);
                    break;
                }
                case (uint) PropertyID.MovementStarted: {
                    changed = _movementStartedProperty.Read(stream, context);
                    if (changed) FireMovementStartedDidChange(movementStarted);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _shouldMoveOnThisTurn = shouldMoveOnThisTurn;
        _inTurnMoveIndex = inTurnMoveIndex;
        _shouldBeCapturedOnThisTurn = shouldBeCapturedOnThisTurn;
        _movementStarted = movementStarted;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
