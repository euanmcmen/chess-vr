using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class GameScreenModel
{
    [RealtimeProperty(2, true, true)]
    private string _currentLightMove;

    [RealtimeProperty(3, true, true)]
    private string _currentDarkMove;

    [RealtimeProperty(4, true, true)]
    public string _currentTurnNumber;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class GameScreenModel : RealtimeModel {
    public string currentLightMove {
        get {
            return _currentLightMoveProperty.value;
        }
        set {
            if (_currentLightMoveProperty.value == value) return;
            _currentLightMoveProperty.value = value;
            InvalidateReliableLength();
            FireCurrentLightMoveDidChange(value);
        }
    }
    
    public string currentDarkMove {
        get {
            return _currentDarkMoveProperty.value;
        }
        set {
            if (_currentDarkMoveProperty.value == value) return;
            _currentDarkMoveProperty.value = value;
            InvalidateReliableLength();
            FireCurrentDarkMoveDidChange(value);
        }
    }
    
    public string currentTurnNumber {
        get {
            return _currentTurnNumberProperty.value;
        }
        set {
            if (_currentTurnNumberProperty.value == value) return;
            _currentTurnNumberProperty.value = value;
            InvalidateReliableLength();
            FireCurrentTurnNumberDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(GameScreenModel model, T value);
    public event PropertyChangedHandler<string> currentLightMoveDidChange;
    public event PropertyChangedHandler<string> currentDarkMoveDidChange;
    public event PropertyChangedHandler<string> currentTurnNumberDidChange;
    
    public enum PropertyID : uint {
        CurrentLightMove = 2,
        CurrentDarkMove = 3,
        CurrentTurnNumber = 4,
    }
    
    #region Properties
    
    private ReliableProperty<string> _currentLightMoveProperty;
    
    private ReliableProperty<string> _currentDarkMoveProperty;
    
    private ReliableProperty<string> _currentTurnNumberProperty;
    
    #endregion
    
    public GameScreenModel() : base(null) {
        _currentLightMoveProperty = new ReliableProperty<string>(2, _currentLightMove);
        _currentDarkMoveProperty = new ReliableProperty<string>(3, _currentDarkMove);
        _currentTurnNumberProperty = new ReliableProperty<string>(4, _currentTurnNumber);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _currentLightMoveProperty.UnsubscribeCallback();
        _currentDarkMoveProperty.UnsubscribeCallback();
        _currentTurnNumberProperty.UnsubscribeCallback();
    }
    
    private void FireCurrentLightMoveDidChange(string value) {
        try {
            currentLightMoveDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireCurrentDarkMoveDidChange(string value) {
        try {
            currentDarkMoveDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireCurrentTurnNumberDidChange(string value) {
        try {
            currentTurnNumberDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _currentLightMoveProperty.WriteLength(context);
        length += _currentDarkMoveProperty.WriteLength(context);
        length += _currentTurnNumberProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _currentLightMoveProperty.Write(stream, context);
        writes |= _currentDarkMoveProperty.Write(stream, context);
        writes |= _currentTurnNumberProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.CurrentLightMove: {
                    changed = _currentLightMoveProperty.Read(stream, context);
                    if (changed) FireCurrentLightMoveDidChange(currentLightMove);
                    break;
                }
                case (uint) PropertyID.CurrentDarkMove: {
                    changed = _currentDarkMoveProperty.Read(stream, context);
                    if (changed) FireCurrentDarkMoveDidChange(currentDarkMove);
                    break;
                }
                case (uint) PropertyID.CurrentTurnNumber: {
                    changed = _currentTurnNumberProperty.Read(stream, context);
                    if (changed) FireCurrentTurnNumberDidChange(currentTurnNumber);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _currentLightMove = currentLightMove;
        _currentDarkMove = currentDarkMove;
        _currentTurnNumber = currentTurnNumber;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
