using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Normal.Realtime;
using Normal.Realtime.Serialization;

// A movement instruction for a single piece.

[RealtimeModel]
public partial class PieceMoveDataModel
{
    [RealtimeProperty(1, true, false)]
    private string _pieceName;

    [RealtimeProperty(2, true, false)]
    private string _destinationTileName;

    [RealtimeProperty(3, true, false)]
    private int _turnIndex;

    [RealtimeProperty(4, true, false)]
    private int _inTurnMoveIndex;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class PieceMoveDataModel : RealtimeModel {
    public string pieceName {
        get {
            return _pieceNameProperty.value;
        }
        set {
            if (_pieceNameProperty.value == value) return;
            _pieceNameProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public string destinationTileName {
        get {
            return _destinationTileNameProperty.value;
        }
        set {
            if (_destinationTileNameProperty.value == value) return;
            _destinationTileNameProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public int turnIndex {
        get {
            return _turnIndexProperty.value;
        }
        set {
            if (_turnIndexProperty.value == value) return;
            _turnIndexProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public int inTurnMoveIndex {
        get {
            return _inTurnMoveIndexProperty.value;
        }
        set {
            if (_inTurnMoveIndexProperty.value == value) return;
            _inTurnMoveIndexProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public enum PropertyID : uint {
        PieceName = 1,
        DestinationTileName = 2,
        TurnIndex = 3,
        InTurnMoveIndex = 4,
    }
    
    #region Properties
    
    private ReliableProperty<string> _pieceNameProperty;
    
    private ReliableProperty<string> _destinationTileNameProperty;
    
    private ReliableProperty<int> _turnIndexProperty;
    
    private ReliableProperty<int> _inTurnMoveIndexProperty;
    
    #endregion
    
    public PieceMoveDataModel() : base(null) {
        _pieceNameProperty = new ReliableProperty<string>(1, _pieceName);
        _destinationTileNameProperty = new ReliableProperty<string>(2, _destinationTileName);
        _turnIndexProperty = new ReliableProperty<int>(3, _turnIndex);
        _inTurnMoveIndexProperty = new ReliableProperty<int>(4, _inTurnMoveIndex);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _pieceNameProperty.UnsubscribeCallback();
        _destinationTileNameProperty.UnsubscribeCallback();
        _turnIndexProperty.UnsubscribeCallback();
        _inTurnMoveIndexProperty.UnsubscribeCallback();
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _pieceNameProperty.WriteLength(context);
        length += _destinationTileNameProperty.WriteLength(context);
        length += _turnIndexProperty.WriteLength(context);
        length += _inTurnMoveIndexProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _pieceNameProperty.Write(stream, context);
        writes |= _destinationTileNameProperty.Write(stream, context);
        writes |= _turnIndexProperty.Write(stream, context);
        writes |= _inTurnMoveIndexProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.PieceName: {
                    changed = _pieceNameProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.DestinationTileName: {
                    changed = _destinationTileNameProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.TurnIndex: {
                    changed = _turnIndexProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.InTurnMoveIndex: {
                    changed = _inTurnMoveIndexProperty.Read(stream, context);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _pieceName = pieceName;
        _destinationTileName = destinationTileName;
        _turnIndex = turnIndex;
        _inTurnMoveIndex = inTurnMoveIndex;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
