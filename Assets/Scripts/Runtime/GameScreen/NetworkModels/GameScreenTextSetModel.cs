using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class GameScreenTextSetModel
{
    [RealtimeProperty(1, true, true)]
    private string _previousMove;

    [RealtimeProperty(2, true, true)]
    private string _currentMove;

    [RealtimeProperty(3, true, true)]
    private string _nextMove;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class GameScreenTextSetModel : RealtimeModel {
    public string previousMove {
        get {
            return _previousMoveProperty.value;
        }
        set {
            if (_previousMoveProperty.value == value) return;
            _previousMoveProperty.value = value;
            InvalidateReliableLength();
            FirePreviousMoveDidChange(value);
        }
    }
    
    public string currentMove {
        get {
            return _currentMoveProperty.value;
        }
        set {
            if (_currentMoveProperty.value == value) return;
            _currentMoveProperty.value = value;
            InvalidateReliableLength();
            FireCurrentMoveDidChange(value);
        }
    }
    
    public string nextMove {
        get {
            return _nextMoveProperty.value;
        }
        set {
            if (_nextMoveProperty.value == value) return;
            _nextMoveProperty.value = value;
            InvalidateReliableLength();
            FireNextMoveDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(GameScreenTextSetModel model, T value);
    public event PropertyChangedHandler<string> previousMoveDidChange;
    public event PropertyChangedHandler<string> currentMoveDidChange;
    public event PropertyChangedHandler<string> nextMoveDidChange;
    
    public enum PropertyID : uint {
        PreviousMove = 1,
        CurrentMove = 2,
        NextMove = 3,
    }
    
    #region Properties
    
    private ReliableProperty<string> _previousMoveProperty;
    
    private ReliableProperty<string> _currentMoveProperty;
    
    private ReliableProperty<string> _nextMoveProperty;
    
    #endregion
    
    public GameScreenTextSetModel() : base(null) {
        _previousMoveProperty = new ReliableProperty<string>(1, _previousMove);
        _currentMoveProperty = new ReliableProperty<string>(2, _currentMove);
        _nextMoveProperty = new ReliableProperty<string>(3, _nextMove);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _previousMoveProperty.UnsubscribeCallback();
        _currentMoveProperty.UnsubscribeCallback();
        _nextMoveProperty.UnsubscribeCallback();
    }
    
    private void FirePreviousMoveDidChange(string value) {
        try {
            previousMoveDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireCurrentMoveDidChange(string value) {
        try {
            currentMoveDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireNextMoveDidChange(string value) {
        try {
            nextMoveDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _previousMoveProperty.WriteLength(context);
        length += _currentMoveProperty.WriteLength(context);
        length += _nextMoveProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _previousMoveProperty.Write(stream, context);
        writes |= _currentMoveProperty.Write(stream, context);
        writes |= _nextMoveProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.PreviousMove: {
                    changed = _previousMoveProperty.Read(stream, context);
                    if (changed) FirePreviousMoveDidChange(previousMove);
                    break;
                }
                case (uint) PropertyID.CurrentMove: {
                    changed = _currentMoveProperty.Read(stream, context);
                    if (changed) FireCurrentMoveDidChange(currentMove);
                    break;
                }
                case (uint) PropertyID.NextMove: {
                    changed = _nextMoveProperty.Read(stream, context);
                    if (changed) FireNextMoveDidChange(nextMove);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _previousMove = previousMove;
        _currentMove = currentMove;
        _nextMove = nextMove;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
