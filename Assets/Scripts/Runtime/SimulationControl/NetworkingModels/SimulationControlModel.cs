using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class SimulationControlModel
{
    [RealtimeProperty(1, true, true)]
    private bool _isRunning;

    [RealtimeProperty(2, true, true)]
    private bool _simulationStarted;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class SimulationControlModel : RealtimeModel {
    public bool isRunning {
        get {
            return _isRunningProperty.value;
        }
        set {
            if (_isRunningProperty.value == value) return;
            _isRunningProperty.value = value;
            InvalidateReliableLength();
            FireIsRunningDidChange(value);
        }
    }
    
    public bool simulationStarted {
        get {
            return _simulationStartedProperty.value;
        }
        set {
            if (_simulationStartedProperty.value == value) return;
            _simulationStartedProperty.value = value;
            InvalidateReliableLength();
            FireSimulationStartedDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(SimulationControlModel model, T value);
    public event PropertyChangedHandler<bool> isRunningDidChange;
    public event PropertyChangedHandler<bool> simulationStartedDidChange;
    
    public enum PropertyID : uint {
        IsRunning = 1,
        SimulationStarted = 2,
    }
    
    #region Properties
    
    private ReliableProperty<bool> _isRunningProperty;
    
    private ReliableProperty<bool> _simulationStartedProperty;
    
    #endregion
    
    public SimulationControlModel() : base(null) {
        _isRunningProperty = new ReliableProperty<bool>(1, _isRunning);
        _simulationStartedProperty = new ReliableProperty<bool>(2, _simulationStarted);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _isRunningProperty.UnsubscribeCallback();
        _simulationStartedProperty.UnsubscribeCallback();
    }
    
    private void FireIsRunningDidChange(bool value) {
        try {
            isRunningDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireSimulationStartedDidChange(bool value) {
        try {
            simulationStartedDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _isRunningProperty.WriteLength(context);
        length += _simulationStartedProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _isRunningProperty.Write(stream, context);
        writes |= _simulationStartedProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.IsRunning: {
                    changed = _isRunningProperty.Read(stream, context);
                    if (changed) FireIsRunningDidChange(isRunning);
                    break;
                }
                case (uint) PropertyID.SimulationStarted: {
                    changed = _simulationStartedProperty.Read(stream, context);
                    if (changed) FireSimulationStartedDidChange(simulationStarted);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _isRunning = isRunning;
        _simulationStarted = simulationStarted;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
